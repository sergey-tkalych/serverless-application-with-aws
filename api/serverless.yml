service: messages-api

plugins:
  - serverless-offline
#   - serverless-dynamodb-local

# custom:
#   dynamodb:
#     start:
#       port: 8000
#       inMemory: true
#       migrate: true
#     migration:
#       dir: offline/migrations

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  memorySize: 128
  timeout: 3
  environment:
    MESSAGES_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-MessagesDynamoDbTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MESSAGES_DYNAMODB_TABLE}"

functions:
  messagesList:
    handler: src/lambdas/messages/handler.list
    events:
      - http:
          path: messages
          method: get
          cors: true
  messagesCreate:
    handler: src/lambdas/messages/handler.create
    events:
      - http:
          path: messages
          method: post
          cors: true

resources:
  Resources:
    UrlsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.MESSAGES_DYNAMODB_TABLE}